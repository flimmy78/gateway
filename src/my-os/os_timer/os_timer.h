/********************************************************************************
**
** 文件名:     os_timer.h
** 版权所有:   
** 文件描述:   实现定时器驱动
**
*********************************************************************************
**             修改历史记录
**===============================================================================
**| 日期       | 作者   |  修改记录
**===============================================================================
**| 2012/08/14 | 苏友江 |  创建该文件
*********************************************************************************/
#ifndef H_OS_TIMER
#define H_OS_TIMER


/* 最大定时器数 */
#define OS_MAX_TIMER         20

/*
********************************************************************************
*                  DEFINE TIMER UNIT
********************************************************************************
*/

#define OS_TICKS_PER_SEC     200                 /* 系统每秒的时基个数定义 */
#define MILTICK              20                  /* 100ms */
#define SECOND               OS_TICKS_PER_SEC    /* 1 second */
#define MINUTE               (60 * SECOND)       /* 1 minute */

/*
********************************************************************************
* 定义模块配置参量
********************************************************************************
*/


/*******************************************************************
** 函数名:     os_timer_get_used_num
** 函数描述:   获取已安装定时器个数
** 参数:       无
** 返回:       已安装定时器个数
********************************************************************/
INT8U os_timer_get_used_num(void);

/*******************************************************************
** 函数名:     os_timer_delete
** 函数描述:   删除一个已创建的定时器
** 参数:       [in]  id:        已创建的一个定时器ID
** 返回:       无
********************************************************************/
void os_timer_delete(INT8U id);

/*******************************************************************
** 函数名:     os_timer_left
** 函数描述:   获取定时器剩余的运行时间
** 参数:       [in]  id:        已创建的一个定时器ID
** 返回:       剩余的运行时间, 单位: 100ms
********************************************************************/
INT16U os_timer_left(INT8U id);

/*******************************************************************
** 函数名:     os_timer_is_run
** 函数描述:   判断定时器是否处于运行状态
** 参数:       [in]  id:    已创建的一个定时器ID
** 返回:       true:  定时器处于运行状态
**             false: 定时器处于停止状态
********************************************************************/
BOOLEAN os_timer_is_run(INT8U id);

/*******************************************************************
** 函数名:     os_timer_create
** 函数描述:   安装一个定时器
** 参数:       [in] index:     定时器标识, 当定时器超时执行超时处理函数时, 该参数作为形参传入处理函数
**             [in] tmrproc:   定时器超时处理函数
** 返回:       定时器ID; 如安装失败, 则返回0xff
** 注意:       安装完定时器还需调用Gps_StartTmr才能启动定时器运行
********************************************************************/
INT8U os_timer_create(void *index, void (*tmrproc)(void *index));

/*******************************************************************
** 函数名:     os_timer_start
** 函数描述:   启动定时器
** 参数:       [in]  id:        已创建的一个定时器ID
**             [in]  attrib:    定时器超时时间单位
**             [in]  time:      定时器超时时间
** 返回:       无
********************************************************************/
void os_timer_start(INT8U id, INT16U time);

/*******************************************************************
** 函数名:     os_timer_stop
** 函数描述:   停止定时器
** 参数:       [in]  id:        已创建的一个定时器ID
** 返回:       无
********************************************************************/
void os_timer_stop(INT8U id);

/*******************************************************************
** 函数名:     os_timer_scan
** 函数描述:   定时器超时后的处理函数
** 参数:       无
** 返回:       无
********************************************************************/
void os_timer_scan(void);

/*******************************************************************
** 函数名:     os_timer_init
** 函数描述:   定时器模块初始化函数
** 参数:       无
** 返回:       无
********************************************************************/
void os_timer_init(void);

#endif          /* end of H_YX_TIMER */


